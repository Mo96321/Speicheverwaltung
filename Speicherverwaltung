#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

// Constans
#define MEMORY_SIZE 1024
#define PARTITION_SIZE 128
#define NUM_PARTITIONS (MEMORY_SIZE / PARTITION_SIZE)

// Enums for management types and allocation types
typedef enum { STATIC, DYNAMIC, BUDDY } ManagementType;
typedef enum { FIRST_FIT, NEXT_FIT, BEST_FIT } AllocationType;

// Struct for memory blocks
typedef struct MemoryBlock {
    int size;
    struct MemoryBlock * next;
    
} MemoryBlock;

// Global variables
ManagementType management_type;
AllocationType allocation_type;
MemoryBlock* static_partitions[NUM_PARTITIONS];
int static_partition_usage[NUM_PARTITIONS];
MemoryBlock* dynamic_free_list;
MemoryBlock* dynamic_allocated_list;
MemoryBlock* buddy_free_list[10];
FILE* log_file = NULL;

// Signal handler for graceful termination
void handle_signal(int signal) {
    if (log_file) {
        fclose(log_file);
    }
    exit(EXIT_SUCCESS);
}

// Function to initialize static memory system
void initialize static system() {
    for (int i = 0; i < NUM_PARTITION; i++) {
        static_partitions[i] = malloc(PARTITION_SIZE);
        static_partition_usage[i] = 0;
    }
}

//Function to allocate static memory
void* allocate_static memory(int size){
    if (size > PARTITION_SIZE){
        print("Error: Requested size too Large for static partitioning.\n");
        return NULL;
    }
    for (int i = 0 < NUM_PARTITION; i++){
        if(!static_partition_usage[i]){
            static_partition_usage[i] = 1;
            if (log_file) {
                fprint(log_file, "Allocate %d bytes in static partiton %d\n", size, i);
            }
            return static_partitions[i];
        }
    }
    print("Error: No free static partiton available.\n");
    return NULL;
}

// Function to free static memory
void free_static_memory(void* ptr){
    for (int i = 0; i< NUM_PARTITIONS; i++){
        if (static_partitions[i] == ptr){
            static_partition_usage[i] = 0;
            if (log_file) {
                fprintf(log_file, "Freed static memory in partition %d\n", i);
            }
            return;
        }
    }
    printf("Error: Invalid static memory adress.\n");
    
}
